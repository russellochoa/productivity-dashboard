<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="robots" content="noindex, nofollow">
    <title>Productivity Dashboard</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">

    <style>
        body {
            background: linear-gradient(225deg, #0d324d, #1a5f7a, #75abbc);
            font-family: 'Inter', sans-serif;
            margin: 0; 
            height: 100vh;
            width: 100vw;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden; 
        }

        #virtual-screen-wrapper {
            aspect-ratio: 5.3 / 8.5;
            height: 95vh;
            max-width: 95vw;
        }

        #main-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: 1.2fr min-content 2fr 2fr;
            width: 100%;
            height: 100%;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 1.5rem;
            padding: 1rem;
            gap: 1rem;
            box-sizing: border-box;
        }

        .dashboard-module {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 1rem; 
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            overflow: hidden; 
            min-height: 0; 
            color: #E0E0E0;
        }
        
        #header-module {
            grid-column: 1 / -1;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
        }

        #header-image-container {
            height: 100%;
            aspect-ratio: 1 / 1;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.2);
        }

        #profile-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .module-title {
            font-weight: 700;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        /* Centering for interchangeable modules */
        #quote-module, #stock-module, #news-module {
            justify-content: center;
            align-items: center;
        }
        #quote-text {
            text-align: center;
        }
        #quote-author {
            flex-shrink: 0; 
        }


        #events-list {
            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: 5px;
            flex-grow: 1;
            overflow: hidden; 
        }
        
        .event-item, .event-group {
            width: 100%;
        }

        .event-group {
            display: flex;
            gap: 5px;
        }

        .event-bubble {
            background-color: rgba(255, 255, 255, 0.08);
            border-radius: 0.75rem;
            padding: 8px 12px;
            width: 100%;
            overflow: hidden;
            flex-shrink: 0;
            transition: flex-basis 0.8s cubic-bezier(0.25, 0.1, 0.25, 1);
        }
        .event-group .event-bubble {
             flex-basis: 33.33%;
             flex-grow: 1;
        }

        .event-bubble:hover {
            background-color: rgba(255, 255, 255, 0.15);
        }
        
        .event-details {
            font-family: 'Roboto', sans-serif;
        }

        /* Weather & Stock Widget Styles */
        .weather-widgets-container {
            display: flex;
            justify-content: space-between;
            gap: 0.75rem;
            margin-top: 0.75rem;
        }
        .weather-widget {
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }
        .weather-widget-value {
            font-size: 1.6vh;
            font-weight: 500;
            color: white;
        }
        .stock-price {
            font-size: 4vh;
            font-weight: 700;
            color: white;
        }
        .stock-change.positive { color: #4ade80; }
        .stock-change.negative { color: #f87171; }

        .album-container, .status-image-container {
            position: relative;
            width: 100%;
            height: 100%;
            flex-grow: 1;
        }
        .album-container img, .status-image-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .album-container img { transition: opacity 1.5s ease, transform 1.5s ease; }
        .album-container.transition-slide img { transition: transform 1s ease-in-out; }
        .album-container.transition-zoom img.active { transform: scale(1.1); }

    </style>
</head>
<body class="">

    <div id="virtual-screen-wrapper">
        <div id="main-grid">
            <div id="header-module" class="dashboard-module">
                <div id="header-text-content">
                    <h2 id="dashboard-title" class="module-title text-[3vh] text-white opacity-90 pl-5"></h2>
                    <div id="time" class="text-[5.5vh] leading-none font-bold text-white mt-1 pl-5">--:-- --</div>
                    <div id="date" class="text-[2.2vh] text-slate-300 font-medium mt-2 pl-5"></div>
                </div>
                <div id="header-image-container">
                    <img id="profile-image" src="" alt="Profile">
                </div>
            </div>
            
            <!-- Interchangeable Modules -->
            <div id="quote-module" class="dashboard-module p-3">
                 <p id="quote-text" class="text-[1.7vh] leading-tight font-light text-slate-200 flex-grow"></p>
                 <p id="quote-author" class="text-right text-slate-400 text-[1.4vh] mt-2"></p>
            </div>
            <div id="stock-module" class="dashboard-module p-3" style="display: none;">
                <h3 class="module-title text-[2vh]">SPY</h3>
                <div class="text-center">
                    <p id="stock-price" class="stock-price">---.--</p>
                    <p id="stock-change" class="text-[1.8vh]">-.-- (-.--%)</p>
                </div>
            </div>
             <div id="news-module" class="dashboard-module p-3" style="display: none;">
                <h3 class="module-title text-[2vh]">Top Headline</h3>
                <p id="news-headline" class="text-[1.7vh] leading-tight font-light text-slate-200 flex-grow text-center"></p>
            </div>

            <div id="weather-module" class="dashboard-module p-3 justify-between">
                <div>
                    <div class="flex items-start justify-between">
                        <p class="text-[5vh] leading-none font-bold text-white" id="weather-temp"></p>
                        <div class="text-right text-slate-300 text-[1.4vh]">
                            <p id="weather-location"></p>
                            <p id="weather-high-low"></p>
                        </div>
                    </div>
                </div>
                <div class="weather-widgets-container">
                    <div class="weather-widget">
                        <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"></circle><path d="M12 2v2"></path><path d="M12 20v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path d="M20 12h2"></path><path d="m6.34 17.66-1.41 1.41"></path><path d="m19.07 4.93-1.41 1.41"></path></svg>
                        <span id="uv-index" class="weather-widget-value">--</span>
                    </div>
                    <div class="weather-widget">
                         <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12.5 22a7 7 0 0 0-7-7 7 7 0 0 0-7 7"></path><path d="M12.5 15a7 7 0 0 1 7-7 7 7 0 0 1 7 7"></path><path d="M12.5 8a7 7 0 0 0-7-7 7 7 0 0 0-7 7"></path><path d="M12.5 1a7 7 0 0 1 7-7 7 7 0 0 1 7 7"></path></svg>
                        <span id="aqi-value" class="weather-widget-value">--</span>
                    </div>
                     <div class="weather-widget">
                         <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22a7 7 0 0 0 7-7c0-2-1-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z"></path></svg>
                        <span id="humidity-value" class="weather-widget-value">--%</span>
                    </div>
                </div>
            </div>
            <div id="status-module" class="dashboard-module p-0">
                <div class="p-3">
                    <h3 id="status-title" class="text-[2vh] leading-tight module-title flex-shrink-0 truncate"></h3>
                </div>
                <div class="status-image-container bg-black/20">
                    <img id="status-image" src="" alt="Current Status">
                </div>
            </div>
            <div id="events-module" class="dashboard-module p-3">
                <h3 class="module-title text-[2vh] mb-1 flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                    <span>Upcoming Events</span>
                </h3>
                <ul id="events-list"></ul>
            </div>
            <div id="personal-album-module" class="dashboard-module p-0">
                <div id="personal-album-container" class="album-container bg-black/20"></div>
            </div>
            <div id="company-album-module" class="dashboard-module p-0">
                <div id="company-album-container" class="album-container bg-black/20"></div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        
        const config = {
            dashboardTitle: "Russell's Desk",
            profileImageUrl: "https://www.dropbox.com/scl/fi/7fsfrr4yixqmmh0i0p67p/C2E599B7-FF0F-4740-8EB0-BD57C60723AB.jpg?rlkey=pawp5kwzu81n1hrqzxxric8lm&st=b2yrbs29&raw=1",
            dataRefreshInterval: 15 * 60 * 1000,
            leftModuleMode: 'rotate', // Change to 'static' to disable rotation
            activeLeftModule: 'quote', // Used only if mode is 'static'
            quoteUrl: 'https://zenquotes.io/api/quotes/keyword?&maxLength=150',
            weatherUrl: '/weather.json',
            eventsUrl: '/events.json',
            personalPhotosUrl: '/personal_photos.json',
            companyPhotosUrl: '/company_art.json',
            personalAlbum: { rotateSpeed: 5000, order: 'random', transition: 'fade', transitionSpeed: 1.5 },
            companyAlbum: { rotateSpeed: 10000, order: 'sequential', transition: 'fade', transitionSpeed: 1.5 },
            statusConfig: {
                images: {
                    'In a Meeting': 'https://images.unsplash.com/photo-1554224312-3b5013403484?q=80&w=2070&auto=format=fit',
                    'In a Zoom Meeting': 'https://images.unsplash.com/photo-1554224312-3b5013403484?q=80&w=2070&auto=format=fit',
                    'Focus Time': 'https://cdn.pixabay.com/animation/2024/05/16/21/45/21-45-34-3_512.gif',
                    'Out at Lunch': 'https://images.unsplash.com/photo-1550547660-d9450f859349?q=80&w=1887&auto=format=fit',
                    'Out of Office': 'https://images.unsplash.com/photo-1508985249468-5352e5ebd89a?q=80&w=2070&auto=format=fit',
                    'Out Sick': 'https://images.unsplash.com/photo-1555883523-c3942355656c?q=80&w=1887&auto=format=fit',
                    'Overloaded Human': 'https://images.unsplash.com/photo-1531393326464-18593243a069?q=80&w=1887&auto=format=fit',
                    'Available': 'https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?q=80&w=2070&auto=format=fit=crop',
                    'default': 'https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?q=80&w=2070&auto=format=fit=crop'
                },
                fallback_statuses: {
                    early_morning: ["Booting Up… Breakfast First", "Working Out (Mentally and Physically)", "System Not Ready"],
                    start_of_day: ["Starting the Day Strong", "Thoughts Loading… Please Wait", "Warming Up Slack Fingers"],
                    end_of_day: ["Workday Shutdown in Progress", "Office Evacuation in Progress"],
                    after_work: ["Logging Out IRL", "Goodbye Desk, Hello Couch", "Out for the Day - Try Again Tomorrow"],
                    evening: ["Do Not Disturb - Life in Progress", "Battery Depleted - Recharging"]
                }
            }
        };

        const elements = {
            body: document.body,
            dashboardTitle: document.getElementById('dashboard-title'),
            profileImage: document.getElementById('profile-image'),
            time: document.getElementById('time'),
            date: document.getElementById('date'),
            quoteModule: document.getElementById('quote-module'),
            quoteText: document.getElementById('quote-text'),
            quoteAuthor: document.getElementById('quote-author'),
            stockModule: document.getElementById('stock-module'),
            stockPrice: document.getElementById('stock-price'),
            stockChange: document.getElementById('stock-change'),
            newsModule: document.getElementById('news-module'),
            newsHeadline: document.getElementById('news-headline'),
            weatherLocation: document.getElementById('weather-location'),
            weatherTemp: document.getElementById('weather-temp'),
            weatherHighLow: document.getElementById('weather-high-low'),
            uvIndex: document.getElementById('uv-index'),
            aqiValue: document.getElementById('aqi-value'),
            humidityValue: document.getElementById('humidity-value'),
            statusTitle: document.getElementById('status-title'),
            statusImage: document.getElementById('status-image'),
            eventsList: document.getElementById('events-list'),
            personalAlbumContainer: document.getElementById('personal-album-container'),
            companyAlbumContainer: document.getElementById('company-album-container'),
        };

        let activeIntervals = [];
        let currentCalendar = [];

        // --- Core Functions ---
        function stopAllIntervals() {
            activeIntervals.forEach(clearInterval);
            activeIntervals = [];
        }

        async function fetchWithMock(url, mockData) {
            try {
                const proxyUrl = `https://cors-anywhere.herokuapp.com/${url}`;
                const response = await fetch(proxyUrl);
                if (!response.ok) return mockData;
                return await response.json();
            } catch (error) { 
                console.error("Fetch error:", error);
                return mockData; 
            }
        }

        function updateClock() {
            const now = new Date();
            elements.time.textContent = now.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
            elements.date.textContent = now.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' });
        }

        // --- Status Logic ---
        const statusManager = {
            primaryStatus: 'Available',
            easterEggActive: false,
            lastEasterEggTime: 0,
            
            setStatus(newStatus, isEasterEgg = false) {
                if (isEasterEgg) {
                    this.easterEggActive = true;
                    this.renderStatus(newStatus);
                    setTimeout(() => {
                        this.easterEggActive = false;
                        this.renderStatus(this.primaryStatus);
                    }, 10000); 
                } else {
                    this.primaryStatus = newStatus;
                    if (!this.easterEggActive) {
                        this.renderStatus(newStatus);
                    }
                }
            },

            renderStatus(statusText) {
                elements.statusTitle.textContent = statusText;
                const imageUrl = config.statusConfig.images[statusText] || config.statusConfig.images['default'];
                elements.statusImage.src = imageUrl;
            },

            evaluate() {
                const now = new Date();
                const currentHour = now.getHours();
                const currentEvent = this.getCurrentEvent(now);
                if (currentEvent) {
                    this.setStatus(this.getStatusFromEvent(currentEvent));
                    return;
                }
                this.setStatus(this.getFallbackStatus(currentHour));
            },
            
            getCurrentEvent(now) {
                return null; 
            },

            getStatusFromEvent(event) {
                if (event.summary.toLowerCase().includes('lunch')) return 'Out at Lunch';
                if (event.summary.toLowerCase().includes('focus time')) return 'Focus Time';
                if (event.conferenceData) return 'In a Zoom Meeting';
                return 'In a Meeting';
            },

            getFallbackStatus(hour) {
                let statusList;
                if (hour >= 6 && hour < 8) statusList = config.statusConfig.fallback_statuses.early_morning;
                else if (hour >= 8 && hour < 9) statusList = config.statusConfig.fallback_statuses.start_of_day;
                else if (hour >= 16 && hour < 16.5) statusList = config.statusConfig.fallback_statuses.end_of_day;
                else if (hour >= 16.5 && hour < 18) statusList = config.statusConfig.fallback_statuses.after_work;
                else if (hour >= 18) statusList = config.statusConfig.fallback_statuses.evening;
                else return 'Available';
                
                const index = Math.floor((Date.now() / 10000) % statusList.length);
                return statusList[index];
            },
        };

        function updateMasterStatus() {
            const now = new Date();
            const timeSinceLastEgg = now.getTime() - statusManager.lastEasterEggTime;
            
            if (timeSinceLastEgg > 20 * 60 * 1000) {
                const meetingCount = currentCalendar.length;
                if (meetingCount > 6) { 
                    statusManager.setStatus('Too Many Meetings (warning)', true);
                    statusManager.lastEasterEggTime = now.getTime();
                } else if (meetingCount <= 3) {
                    statusManager.setStatus('What a chill day today', true);
                    statusManager.lastEasterEggTime = now.getTime();
                }
            }
            
            if (!statusManager.easterEggActive) {
                statusManager.evaluate();
            }
        }

        // --- UI Update Functions ---
        async function updateWeather() {
            const data = await fetchWithMock(config.weatherUrl, { location: "Lehi", temp: 81, high: 96, low: 62, uvIndex: 5, aqi: 45, humidity: 30 });
            if (data) {
                elements.weatherLocation.textContent = data.location || 'Unknown';
                elements.weatherTemp.textContent = `${data.temp || '--'}°`;
                elements.weatherHighLow.textContent = `H:${data.high || '--'}° L:${data.low || '--'}°`;
                elements.uvIndex.textContent = data.uvIndex;
                elements.aqiValue.textContent = data.aqi;
                elements.humidityValue.textContent = `${data.humidity}%`;
            }
        }

        async function updateQuote() {
            const mockData = [{ q: "The journey of a thousand miles begins with a single step.", a: "Lao Tzu" }];
            const data = await fetchWithMock(config.quoteUrl, mockData);
            if (data && data[0] && data[0].q) {
                elements.quoteText.textContent = `"${data[0].q}"`;
                elements.quoteAuthor.textContent = `- ${data[0].a || 'Unknown'}`;
            }
        }
        
        async function updateStock() {
            const mockData = { price: 543.21, change: 1.23, changePercent: 0.23 };
            elements.stockPrice.textContent = mockData.price.toFixed(2);
            const changeSign = mockData.change > 0 ? '+' : '';
            elements.stockChange.textContent = `${changeSign}${mockData.change.toFixed(2)} (${changeSign}${mockData.changePercent.toFixed(2)}%)`;
            elements.stockChange.className = `text-[1.8vh] stock-change ${mockData.change > 0 ? 'positive' : 'negative'}`;
        }
        
        function updateNews() {
            const mockHeadlines = ["Global Tech Summit Announces Breakthrough in AI.", "New Space Telescope Reveals Secrets of Distant Galaxies.", "Artists and Engineers Collaborate on Immersive Digital Art."];
            const headlineIndex = Math.floor((Date.now() / (30 * 60 * 1000)) % mockHeadlines.length);
            elements.newsHeadline.textContent = mockHeadlines[headlineIndex];
        }


        async function updateEvents() {
            const mockEvents = [
                { startTime: "9am", endTime: "10:30am", summary: "Q3 Financial Review & Strategic Planning Session", location: "JN-5th Floor-Wakanda (10) [Neat Bar]" },
                { startTime: "11:30am", endTime: "12:00pm", summary: "Design Stand-up", location: "Virtual" },
                { startTime: "11:30am", endTime: "1:00pm", summary: "Mobile Lead 1:1", location: "JN-6th Floor-Fury Road (4)" },
                { startTime: "11:30am", endTime: "12:30pm", summary: "Server Sync", location: "Conf Room 3" },
                { startTime: "2pm", endTime: "2:30pm", summary: "Project Sync-Up", location: "Virtual" },
                { startTime: "2pm", endTime: "3:00pm", summary: "HR Training", location: "Auditorium" }
            ];
            currentCalendar = await fetchWithMock(config.eventsUrl, mockEvents);
            elements.eventsList.innerHTML = '';
            
            if (currentCalendar && currentCalendar.length > 0) {
                const eventGroups = groupEventsByTime(currentCalendar); 
                eventGroups.slice(0, 3).forEach(group => {
                    const li = document.createElement('li');
                    if (group.length > 1) {
                        li.className = 'event-group';
                        group.forEach(event => li.innerHTML += createEventBubbleHTML(event));
                    } else {
                        li.className = 'event-item';
                        li.innerHTML = createEventBubbleHTML(group[0]);
                    }
                    elements.eventsList.appendChild(li);
                });
                
                document.querySelectorAll('.event-group').forEach(animateEventGroup);
            } else {
                elements.eventsList.innerHTML = '<li class="text-slate-300 text-center p-4">No upcoming events.</li>';
            }
        }

        function createEventBubbleHTML(event) {
            return `<div class="event-bubble">
                        <p class="font-medium text-white text-[1.5vh] truncate">${event.summary}</p>
                        <div class="flex items-center text-slate-300 gap-2 mt-0.5">
                            <span class="event-details font-light whitespace-nowrap text-[1.3vh]">${formatTimeRange(event.startTime, event.endTime)}</span>
                            <span class="text-slate-400 font-light">&middot;</span>
                            <span class="event-details font-light truncate text-[1.3vh]">${formatLocationName(event.location)}</span>
                        </div>
                    </div>`;
        }

        function groupEventsByTime(events) {
            const groups = {};
            events.forEach(event => {
                const startTime = event.startTime;
                if (!groups[startTime]) groups[startTime] = [];
                groups[startTime].push(event);
            });
            return Object.values(groups);
        }
        
        function animateEventGroup(groupElement) {
            const bubbles = groupElement.querySelectorAll('.event-bubble');
            const numBubbles = bubbles.length;
            if (numBubbles <= 1) return;

            let currentIndex = 0;
            const expandedBasis = 80;
            const shrunkenBasis = (100 - expandedBasis) / (numBubbles - 1);

            const animationCycle = () => {
                bubbles.forEach((bubble, index) => {
                    bubble.style.flexBasis = index === currentIndex ? `${expandedBasis}%` : `${shrunkenBasis}%`;
                });
                currentIndex = (currentIndex + 1) % numBubbles;
            };
            
            animationCycle();
            activeIntervals.push(setInterval(animationCycle, 5000));
        }
        
        async function createSlideshow(container, settings, photosUrl, mockData) {
            const data = await fetchWithMock(photosUrl, mockData);
            if (!data || !data.imageUrls || !data.imageUrls.length) return;
            
            let imageList = data.imageUrls;
            if (settings.order === 'random') imageList.sort(() => Math.random() - 0.5);
            
            container.innerHTML = '';
            const img1 = document.createElement('img');
            const img2 = document.createElement('img');
            container.appendChild(img1);
            container.appendChild(img2);

            let currentIndex = 0;
            let activeImageIndex = 0;
            const imageElements = [img1, img2];

            const showNextImage = () => {
                const currentImg = imageElements[activeImageIndex];
                const nextImg = imageElements[1 - activeImageIndex];
                
                nextImg.src = imageList[currentIndex];
                currentImg.style.opacity = '0';
                nextImg.style.opacity = '1';

                activeImageIndex = 1 - activeImageIndex;
                currentIndex = (currentIndex + 1) % imageList.length;
            };
            
            showNextImage();
            activeIntervals.push(setInterval(showNextImage, settings.rotateSpeed));
        }


        // --- Initialization ---
        async function initializeApp() {
            stopAllIntervals();
            
            applyInitialConfig();
            updateClock();
            
            await fetchAllData();
            
            createSlideshow(elements.personalAlbumContainer, config.personalAlbum, config.personalPhotosUrl, { "imageUrls": ["https://images.unsplash.com/photo-1542038784-56eD8DE09313?q=80&w=1854&auto-format=fit=crop", "https://images.unsplash.com/photo-1519681393784-d120267933ba?q=80&w=2070&auto-format=fit=crop"] });
            createSlideshow(elements.companyAlbumContainer, config.companyAlbum, config.companyPhotosUrl, { "imageUrls": ["https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?q=80&w=1854&auto-format=fit=crop", "https://images.unsplash.com/photo-1620121692029-d088224ddc74?q=80&w=1932&auto-format=fit=crop"] });
            
            activeIntervals.push(setInterval(updateClock, 1000));
            activeIntervals.push(setInterval(fetchAllData, config.dataRefreshInterval));
            activeIntervals.push(setInterval(updateMasterStatus, 5000));

            if(config.leftModuleMode === 'rotate') {
                let moduleIndex = 0;
                const modules = ['quote', 'stock', 'news'];
                activeIntervals.push(setInterval(() => {
                    moduleIndex = (moduleIndex + 1) % modules.length;
                    config.activeLeftModule = modules[moduleIndex];
                    updateLeftModule();
                }, 60000)); // Rotate every 1 minute
            }
        }
        
        function applyInitialConfig() {
            elements.dashboardTitle.textContent = config.dashboardTitle;
            elements.profileImage.src = config.profileImageUrl;
        }

        function updateLeftModule() {
            elements.quoteModule.style.display = 'none';
            elements.stockModule.style.display = 'none';
            elements.newsModule.style.display = 'none';

            if (config.activeLeftModule === 'quote') {
                elements.quoteModule.style.display = 'flex';
                updateQuote();
            } else if (config.activeLeftModule === 'stock') {
                elements.stockModule.style.display = 'flex';
                updateStock();
            } else if (config.activeLeftModule === 'news') {
                elements.newsModule.style.display = 'flex';
                updateNews();
            }
        }

        async function fetchAllData() {
            await Promise.all([
                updateEvents(),
                updateWeather(),
                updateLeftModule()
            ]);
        }
        
        function formatTimeRange(start, end) {
            if (!start || !end) return "";
            const simplifyTime = (timeStr) => timeStr.replace(':00', '').toLowerCase();
            let simpleStart = simplifyTime(start);
            let simpleEnd = simplifyTime(end);
            const startMeridian = simpleStart.includes('am') ? 'am' : 'pm';
            const endMeridian = simpleEnd.includes('am') ? 'am' : 'pm';
            if (startMeridian === endMeridian) {
                simpleStart = simpleStart.replace(startMeridian, '').trim();
            }
            return `${simpleStart} - ${simpleEnd}`;
        }

        function formatLocationName(location) {
            if (!location) return "";
            const parts = location.split('-');
            if (parts.length >= 3) {
                let roomName = parts[2];
                const parenIndex = roomName.indexOf('(');
                if (parenIndex !== -1) {
                    roomName = roomName.substring(0, parenIndex).trim();
                }
                return roomName;
            }
            return location;
        }

        initializeApp();
    });
    </script>
</body>
</html>
